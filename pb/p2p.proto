syntax = "proto3";

package protocols.p2p;

// designed to be shared between all app protocols
message MessageData {
    // shared between all requests
    string clientVersion = 1; // client version
    int64 timestamp = 2;     // unix time
    string id = 3;           // allows requesters to use request data when processing a response
    bool gossip = 4;         // true to have receiver peer gossip the message to neighbors
    string nodeId = 5;       // id of node that created the message (not the peer that may have sent it). =base58(multihash(nodePubKey))
    bytes nodePubKey = 6;    // Authoring node Secp256k1 public key (32bytes) - protobufs serielized
    bytes sign = 7;         // signature of message data + method specific data by message authoring node.
}

//// Multilogue protocol 

message ClientData {
    string peerId = 1;
    string username = 2;
}

message HostData {
    string channelId = 1;
    string peerId = 2;
}

// a protocol define a set of reuqest and responses
message ClientSendMessage {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
    
    string message = 4; 
}

message ClientTransmissionStart {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
    
}

message ClientTransmissionEnd {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;

}


message HostAcceptTransmission {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
}

message HostDenyTransmission {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
}

message HostBroadcastMessage {
    MessageData messageData = 1;

    ClientData clientData = 2;
    HostData hostData = 3;
    
    string message = 4; 

}

message ClientJoinChannel {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
}

message ClientLeaveChannel {
    MessageData messageData = 1;

    ClientData clientData = 2;
    HostData hostData = 3;
}

message HostAcceptClient {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
}

message HostDenyClient {
    MessageData messageData = 1;

    // method specific data
    ClientData clientData = 2;
    HostData hostData = 3;
}



